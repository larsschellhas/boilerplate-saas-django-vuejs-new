# Generated by Django 3.2.10 on 2022-02-06 12:11

import django.contrib.auth.models
import django.utils.timezone
import environ
import usermanagement.models
from django.conf import settings
from django.db import migrations, models

env = environ.Env()


def create_data(apps, schema_editor):
    """Creates admin user"""
    User = apps.get_model(settings.AUTH_USER_MODEL)
    user = User(pk=1, email=env("ADMIN_EMAIL"), is_active=True)
    user.set_password(env("ADMIN_PASSWORD"))
    user.save()


class Migration(migrations.Migration):
    """Contains all migrations"""

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("cuser", "0003_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Workspace",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "workspace_name",
                    models.CharField(max_length=100, verbose_name="Workspace name"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Group",
            fields=[],
            options={
                "verbose_name": "group",
                "verbose_name_plural": "groups",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("cuser.group",),
            managers=[
                ("objects", django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        error_messages={
                            "unique": "A user with that email address already exists."
                        },
                        max_length=254,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "initial_setup_done",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether this user has been setup with additional information after their creation. This can be used for displaying a 'First Setup' page after login.",
                        verbose_name="setup",
                    ),
                ),
                (
                    "terms_and_conditions_accepted",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether a user accepted the terms and conditions. Acceptance is required to use any functionality of the app.",
                        verbose_name="Terms and Conditions accepted",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", usermanagement.models.UserManager()),
            ],
        ),
        migrations.RunPython(create_data),
    ]
